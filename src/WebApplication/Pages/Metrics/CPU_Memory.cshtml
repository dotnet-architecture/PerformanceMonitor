@page
@model WebApplication.Pages.Metrics.CPU_MemoryModel
@using DataTransfer;
@{
    ViewData["Title"] = "CPU_Memory";
}

<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css">
    <script src="https://cdn.plot.ly/plotly-1.2.0.min.js"></script>
</head>

<div class="main">
    <font size="50">CPU and Memory Usage</font>
    <button class="btn btn-default" onClick="window.location.reload()">Refresh Data</button>

    <div id="cpu"></div>
    <script>
        const startCPU = `@Html.Encode(Model.oldStampString)`;
        const endCPU = `@Html.Encode(Model.newStampString)`;
        const idCPU = `@Html.Encode(IndexModel.userSession.Id)`;

        function getData() {
            const url = `http://localhost:54022/api/v1/CPU/Daterange?start=${startCPU}&end=${endCPU}&id=${idCPU}`;
            return fetch(url, {
                method: 'GET',
                mode: 'cors',
                headers: {
                    "Accept": "application/json",
                    'Access-Control-Allow-Origin': '*',
                    "Content-type": "applicaiton/json"
                }
            })
                .then(response => {
                    if (response.ok) {
                        return response;
                    } else {
                        return Promise.reject(response);
                        throw Error(response.statusText);
                    }
                })
                .then(response => response.json())
                .then(function (data) {
                    var dataArray = JSON.parse(data);
                    var cpuUsage = new Array();
                    var cpuTime = new Array();

                    for (var i = 0; i < @Model.cpu.Count; i++) {
                        cpuUsage[i] = dataArray[i].usage;
                        cpuTime[i] = dataArray[i].timestamp;
                    }

                    var dataReturn = new Array();
                    dataReturn[0] = cpuUsage;
                    dataReturn[1] = cpuTime;

                    return dataReturn;
                });
        }

        Promise.all([getData()])
            .then(function (value) {
                var CPU = [{
                    x: value[0][1],
                    y: value[0][0],
                    type: 'scatter'
                }];

                var layout = {
                    title: 'CPU Usage Over Time',
                    yaxis: {
                        title: 'Percentage of CPU Usage',
                        titlefont: {
                            family: 'Arial, sans-serif',
                            size: 18,
                            color: 'lightgrey'
                        },
                        visible: true,
                        range: [0, 100]
                    },
                    xaxis: {
                        title: 'Time',
                        titlefont: {
                            family: 'Arial, sans-serif',
                            size: 18,
                            color: 'lightgrey'
                        }
                    }
                };

                Plotly.plot('cpu', CPU, layout);
            })

        //var cnt = 0;
        //setInterval(function () {
        //    Plotly.extendTraces('chart', { y: [[getUsage()]] }, [0]);
        //    cnt++;
        //    if (cnt > 100) {
        //        Plotly.relayout('chart', {
        //            xaxis: {
        //                range: [cnt - 100, cnt]
        //            }
        //        });
        //    }
        //}, 10);

    </script>

    <div id="mem"></div>
    <script>
        const startMem = `@Html.Encode(Model.oldStampString)`;
        const endMem = `@Html.Encode(Model.newStampString)`;
        const idMem = `@Html.Encode(IndexModel.userSession.Id)`;

        function getData() {
            const url = `http://localhost:54022/api/v1/Memory/Daterange?start=${startCPU}&end=${endCPU}&id=${idCPU}`;
            return fetch(url, {
                method: 'GET',
                mode: 'cors',
                headers: {
                    "Accept": "application/json",
                    'Access-Control-Allow-Origin': '*',
                    "Content-type": "applicaiton/json"
                }
            })
                .then(response => {
                    if (response.ok) {
                        return response;
                    } else {
                        return Promise.reject(response);
                        throw Error(response.statusText);
                    }
                })
                .then(response => response.json())
                .then(function (data) {
                    var dataArray = JSON.parse(data);
                    var memUsage = new Array();
                    var memTime = new Array();

                    for (var i = 0; i < @Model.cpu.Count; i++) {
                        memUsage[i] = dataArray[i].usage;
                        memTime[i] = dataArray[i].timestamp;
                    }

                    var dataReturn = new Array();
                    dataReturn[0] = memUsage;
                    dataReturn[1] = memTime;

                    return dataReturn;
                });
        }

        Promise.all([getData()])
            .then(function (value) {
                var Mem = [{
                    x: value[0][1],
                    y: value[0][0],
                    type: 'scatter'
                }];

                var layout = {
                    title: 'Memory Usage Over Time',
                    yaxis: {
                        title: 'Memory Usage (MB)',
                        titlefont: {
                            family: 'Arial, sans-serif',
                            size: 18,
                            color: 'lightgrey'
                        },
                    },
                    xaxis: {
                        title: 'Time',
                        titlefont: {
                            family: 'Arial, sans-serif',
                            size: 18,
                            color: 'lightgrey'
                        }
                    }
                };

                Plotly.plot('mem', Mem, layout);

                var cnt = 0;
                setInterval(function () {
                    Plotly.extendTraces('mem', { y: [[getData()[0]]] }, [0]);
                    cnt++;
                    if (cnt > @IndexModel.userSession.sendRate/100) {
                        Plotly.relayout('mem', {
                            xaxis: {
                                range: [cnt - @IndexModel.userSession.sendRate/100, cnt]
                            }
                        });
                    }
                }, 5);

                @*var cnt = 0;
                var interval = setInterval(function () {
                    cnt++;
                    if (cnt > @IndexModel.userSession.sendRate* 100) {
                        Plotly.relayout('mem',
                        {
                            'xaxis.range': [cnt - @IndexModel.userSession.sendRate* 100, cnt]
                        })
                    }

                    var Mem = [{
                    x: value[0][1],
                    y: value[0][0],
                    type: 'scatter'
                }];

                    Plotly.extendTraces('mem', {
                        x: value[0][1],
                        y: value[0][0]
                    }, [0])
                }, 500);*@
            })
    </script>

    <p>Average CPU Usage: @Model.avgCPU.ToString("0.00")</p>
    <p>Average Memory Usage: @Model.avgMem.ToString("0.00")</p>

    <p>Log of CPU and Mem Usage</p>
    <table class="table table-hover table-bordered">
        <thead>
            <tr>
                <th>CPU (Percentage)</th>
                <th>Memory (MB)</th>
                <th>Timestamp</th>
            </tr>
        </thead>
        <tbody>
            @if (Model.cpu != null)
            {
                @for (int i = Model.cpu.Count - 1; i >= 0; i--)
                {
                    CPU_Usage c = Model.cpu[i];
                    Mem_Usage m = Model.mem[i];
                    <tr>
                        <td>@c.usage</td>
                        <td>@(m.usage / 1000000.0)</td>
                        <td>@c.timestamp</td>
                    </tr>
                }
            }
            else
            {
                <tr>
                    Unable to retrieve data
                </tr>
            }
        </tbody>
    </table>

    @*<div id="cpu"></div>
        <script>
            const startCPU = `@Html.Encode(Model.oldStampString)`;
            const endCPU = `@Html.Encode(Model.newStampString)`;
            const idCPU = `@Html.Encode(IndexModel.userSession.Id)`;

            const urlCPU = `http://localhost:54022/api/v1/CPU/Daterange?start=${startCPU}&end=${endCPU}&id=${idCPU}`;
            fetch(urlCPU, {
                method: 'GET',
                mode: 'cors',
                headers: {
                    "Accept": "application/json",
                    'Access-Control-Allow-Origin': '*',
                    "Content-type": "applicaiton/json"
                }
            })
                .then(response => {
                    if (response.ok) {
                        return response;
                    } else {
                        return Promise.reject(response);
                        throw Error(response.statusText);
                    }
                })
                .then(response => response.json())
                .then(function (data) {
                    var dataArray = JSON.parse(data);

                    var cpuUsage = new Array();
                    var cpuTime = new Array();

                    for (var i = 0; i < @Model.cpu.Count; i++) {
                        cpuUsage[i] = dataArray[i].usage;
                        cpuTime[i] = dataArray[i].timestamp;
                    }

                    var CPU = [{
                        x: cpuTime,
                        y: cpuUsage,
                        type: 'scatter'
                    }];

                    var layout = {
                        title: 'CPU Usage Over Time',
                        yaxis: {
                            title: 'Percentage of CPU Usage',
                            titlefont: {
                                family: 'Arial, sans-serif',
                                size: 18,
                                color: 'lightgrey'
                            },
                            visible: true,
                            range: [0, 100]
                        },
                        xaxis: {
                            title: 'Time',
                            titlefont: {
                                family: 'Arial, sans-serif',
                                size: 18,
                                color: 'lightgrey'
                            }
                        }
                    };

                    Plotly.plot('cpu', CPU, layout);
                });
        </script>*@

    @*<div id="cpu"></div>
        <script>
            var cpuUsage = @Html.Raw(Json.Serialize(Model.cpuUsage));
            var cpuTime = @Html.Raw(Json.Serialize(Model.cpuTime));

            var dates = new Array();
            for (var i = 0; i < @Model.cpuTime.Count; i++) {
                dates[i] = new Date(cpuTime[i]);
            }

            var CPU = [
                {
                    x: cpuTime,
                    y: cpuUsage,
                    type: 'scatter'
            }];

            var layout = {
                title: 'CPU Usage Over Time',
                yaxis: {
                    title: 'Percentage of CPU Usage',
                    titlefont: {
                        family: 'Arial, sans-serif',
                        size: 18,
                        color: 'lightgrey'
                    },
                    visible: true,
                    range: [0, 100]
                },
                xaxis: {
                    title: 'Time',
                    titlefont: {
                        family: 'Arial, sans-serif',
                        size: 18,
                        color: 'lightgrey'
                    }
                }
            };

            Plotly.plot('cpu', CPU, layout);
        </script>

        <div id="mem"></div>
        <script>
            var cpuUsage = @Html.Raw(Json.Serialize(Model.memUsage));

            var trace1 = {
                y: cpuUsage,
                type: 'scatter'
            };

            var data = [trace1];

            var layout = {
                title: 'Mem Usage Over Time',
                yaxis: {
                    title: 'Mem Usage (MB)',
                    titlefont: {
                        family: 'Arial, sans-serif',
                        size: 18,
                        color: 'lightgrey'
                    },
                    visible: true,
                },
                xaxis: {
                    title: 'Time',
                    titlefont: {
                        family: 'Arial, sans-serif',
                        size: 18,
                        color: 'lightgrey'
                    }
                }
            };

            Plotly.plot('mem', data, layout);
        </script>*@

    @*  Plotly graph that updates continuously and scrolls
        <div id="chart"></div>
        <script>
            function getData() {
                return Math.random();
            }

            var time = new Date();

            Plotly.plot('chart', [{
                y: [getData()],
                type: 'line'
            }])

            var cnt = 0;
            setInterval(function () {
                Plotly.extendTraces('chart', { y: [[getData()]] }, [0]);
                cnt++;
                if (cnt > 100) {
                    Plotly.relayout('chart', {
                        xaxis: {
                            range: [cnt - 100, cnt]
                        }
                    });
                }
            }, 5);
        </script>*@
</div>