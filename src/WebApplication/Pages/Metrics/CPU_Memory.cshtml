@page
@model WebApplication.Pages.Metrics.CPU_MemoryModel
@using DataTransfer;
@{
    ViewData["Title"] = "CPU_Memory";
}

<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css">
    <script src="https://cdn.plot.ly/plotly-1.2.0.min.js"></script>
</head>

<div class="main">
    <font size="50">CPU and Memory Usage</font>

    <div id="chart"></div>
    <script>
        function getData() {
            return @Model.cpu[Model.cpu.Count - 1].usage;
        }

        Plotly.plot('chart', [{
            y: [getData()],
            type: 'line'
        }])

        var cnt = 0;
        setInterval(function () {
            Plotly.extendTraces('chart', { y: [[getData()]] }, [0]);
            cnt++;
            if (cnt > 100) {
                Plotly.relayout('chart', {
                    xaxis: {
                        range: [cnt - 100, cnt]
                    }
                });
            }
        }, 5);
    </script>

    <div id="cputest"></div>
    <script>
            var yy = [@Model.avgCPU, 2];

            var trace1 = {
                y: yy,
                type: 'scatter'
            };

            var data = [trace1];

        var layout = {
            yaxis: {
                visible: true,
                title: 'CPU Usage'
            }
        };

            var graphOptions = {
                layout: layout,
            };

            Plotly.plot('cputest', data, graphOptions);
    </script>

    <div id="cpu"></div>
    <script>
        const start = `@Html.Encode(Model.oldStampString)`;
        const end = `@Html.Encode(Model.newStampString)`;

        const url = `http://localhost:54022/api/v1/CPU/Daterange?start=${start}&end=${end}`;
        const dateRangePromise = fetch(url)
            .then((response) => {
                if (response.ok === false) {
                    return response.text().then(text => {
                        throw new Error(`${response.statusText}\n${text}`);
                    });
                }
                return response;
            })
            .then((response) => response.json());

        var result = Promise.all([dateRangePromise])
            .then(function (myJson) {
                document.write(myJson);
            });

        var usage = []; 
        for (var i = 0; i < result.length; i++) {
            usage.push(result[i].usage);
        }

        var trace1 = {
            y: usage,
            type: 'scatter'
        };

        var data = [trace1];

        var layout = {
            yaxis: {
                visible: true,
                title: 'CPU Usage'
            }
        };

        var graphOptions = {
            layout: layout
        };

        Plotly.plot('cpu', data, graphOptions);
    </script>

    <input type="button" value="Refresh Logs" onClick="window.location.reload()">

    <p>Average CPU Usage: @Model.avgCPU</p>

    <p>Log of CPU Usage</p>
    <table class="table table-hover table-bordered">
        <thead>
            <tr>
                <th>CPU</th>
                <th>Timestamp</th>
            </tr>
        </thead>
        <tbody>
            @if (Model.cpu != null)
            {
                @for (int i = Model.cpu.Count - 1; i >= 0; i--)
                {
                    CPU_Usage c = Model.cpu.ElementAt<CPU_Usage>(i);
                    <tr>
                        <td>@c.usage</td>
                        <td>@c.timestamp</td>
                    </tr>
                }
            }
            else
            {
                <tr>Unable to retrieve data</tr>
            }
        </tbody>
    </table>

    <p>Log of Memory Usage</p>
    <table class="table table-hover table-bordered">
        <thead>
            <tr>
                <th>Memory</th>
                <th>Timestamp</th>
            </tr>
        </thead>
        <tbody>
            @if (Model.mem != null)
            {
                @for (int i = Model.mem.Count - 1; i >= 0; i--)
                {
                    Mem_Usage m = Model.mem.ElementAt<Mem_Usage>(i);
                    <tr>
                        <td>@m.usage</td>
                        <td>@m.timestamp</td>
                    </tr>

                }
            }
            else
            {
                <tr>Unable to retrieve data</tr>
            }
        </tbody>
    </table>
</div>