@page
@model WebApplication.Pages.Metrics.CPU_MemoryModel
@using DataTransfer;
@{
    ViewData["Title"] = "CPU_Memory";
}

<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css">
    <script src="https://cdn.plot.ly/plotly-1.2.0.min.js"></script>
</head>

<div class="main">
    <font size="50">CPU and Memory Usage</font>

    <div id="cpu"></div>
    <script>
        var startCPU = `@Html.Encode(FetchDataService.convertDateTime(Model.oldStamp))`;
        var endCPU = `@Html.Encode(FetchDataService.convertDateTime(Model.newStamp))`;
        const idCPU = `@Html.Encode(IndexModel.userSession.Id)`;

        function getCPUData(start, end) {
            const url = `@WebApplication.Startup.apiDomain`+ `api/v1/CPU/Daterange?start=${start}&end=${end}&id=${idCPU}`;
            return fetch(url, {
                method: 'GET',
                mode: 'cors',
                headers: {
                    "Accept": "application/json",
                    'Access-Control-Allow-Origin': '*',
                    "Content-type": "application/json"
                }
            })
                .then(response => {
                    if (response.ok) {
                        return response;
                    } else {
                        return Promise.reject(response);
                        throw Error(response.statusText);
                    }
                })
                .then(response => response.json())
                .then(function (data) {
                    var dataArray = JSON.parse(data);
                    var cpuUsage = new Array();
                    var cpuTime = new Array();

                    for (var i = 0; i < dataArray.length; i++) {
                        cpuUsage[i] = dataArray[i].usage;
                        cpuTime[i] = new Date(dataArray[i].timestamp);
                    }

                    var dataReturn = new Array();
                    dataReturn[0] = cpuUsage;
                    dataReturn[1] = cpuTime;

                    return dataReturn;
                });
        }

        Promise.all([getCPUData(startCPU, endCPU)])
            // Plotting initial graph
            .then(function (value) {
                var CPU = [{
                    x: value[0][1],
                    y: value[0][0],
                    type: 'scatter'
                }];

                var layout = {
                    title: 'CPU Usage Over Time',
                    yaxis: {
                        title: 'Percentage of CPU Usage',
                        titlefont: {
                            family: 'Arial, sans-serif',
                            size: 18,
                            color: 'lightgrey'
                        },
                        range: [0, 100]
                    },
                    xaxis: {
                        title: 'Time',
                        titlefont: {
                            family: 'Arial, sans-serif',
                            size: 18,
                            color: 'lightgrey'
                        }
                    }
                };

                Plotly.plot('cpu', CPU, layout);
                return;
            })
            .then(setInterval(function () {
                // Updating time stamps
                startCPU = endCPU;
                var now = new Date();
                endCPU = now.getFullYear() + "-" +
                    ("0" + (now.getMonth() + 1)).slice(-2) + "-" +
                    ("0" + now.getDate()).slice(-2) + "T" +
                    ("0" + now.getHours()).slice(-2) + "%3A" +
                    ("0" + now.getMinutes()).slice(-2) + "%3A" +
                    ("0" + now.getSeconds()).slice(-2) + "." +
                    ("0" + now.getMilliseconds()).slice(-3);

                Promise.all([getCPUData(startCPU, endCPU)])
                    .then(function (values) {
                        var xaxis = values[0][1];
                        var yaxis = values[0][0];

                        var update = {
                            x: [xaxis],
                            y: [yaxis]
                        }
                        Plotly.extendTraces('cpu', update, [0]);

                        @*var time = new Date();  
                        var latestTime = new Date(@Model.cpu[0].timestamp); 

                        var oldTime; 
                        var futureTime; 
                        if (latestTime.getTime() > (time.getMinutes() - 10)) {
                            oldTime = latestTime;
                            futureTime = time.setMinutes(time.getMinutes() - @IndexModel.userSession/60000);
                        } else {
                            oldTime = time.setMinutes(time.getMinutes() - 10);
                            futureTime = time.setMinutes(time.getMintues() + 10 - @IndexModel.userSession/60000);
                        }

                        var minuteView = {
                            xaxis: {
                                type: 'date',
                                range: [oldTime, futureTime]
                            }
                        };

                        Plotly.relayout('cpu', minuteView);*@
                    });
            }, @IndexModel.userSession.sendRate*1.1));

    </script>

    <div id="mem"></div>
    <script>
        var startMem = `@Html.Encode(FetchDataService.convertDateTime(Model.oldStamp))`;
        var endMem = `@Html.Encode(FetchDataService.convertDateTime(Model.newStamp))`;
        const idMem = `@Html.Encode(IndexModel.userSession.Id)`;

        function getMemData(start, end) {
            const url = `@WebApplication.Startup.apiDomain` + `api/v1/Memory/Daterange?start=${start}&end=${end}&id=${idMem}`;
            return fetch(url, {
                method: 'GET',
                mode: 'cors',
                headers: {
                    "Accept": "application/json",
                    'Access-Control-Allow-Origin': '*',
                    "Content-type": "application/json"
                }
            })
                .then(response => {
                    if (response.ok) {
                        return response;
                    } else {
                        return Promise.reject(response);
                        throw Error(response.statusText);
                    }
                })
                .then(response => response.json())
                .then(function (data) {
                    var dataArray = JSON.parse(data);
                    var memUsage = new Array();
                    var memTime = new Array();

                    for (var i = 0; i < dataArray.length; i++) {
                        memUsage[i] = dataArray[i].usage;
                        memTime[i] = new Date(dataArray[i].timestamp);
                    }

                    var dataReturn = new Array();
                    dataReturn[0] = memUsage;
                    dataReturn[1] = memTime;
                    return dataReturn;
                });
        }

        Promise.all([getMemData(startMem, endMem)])
            // Plotting initial graph
            .then(function (value) {
                var Mem = [{
                    x: value[0][1],
                    y: value[0][0],
                    type: 'scatter'
                }];

                var layout = {
                    title: 'Memory Usage Over Time',
                    yaxis: {
                        title: 'Memory Usage (MB)',
                        titlefont: {
                            family: 'Arial, sans-serif',
                            size: 18,
                            color: 'lightgrey'
                        },
                    },
                    xaxis: {
                        title: 'Time',
                        titlefont: {
                            family: 'Arial, sans-serif',
                            size: 18,
                            color: 'lightgrey'
                        }
                    }
                };

                Plotly.plot('mem', Mem, layout);
                return;
            })
            .then(setInterval(function () {
                // Updating time stamps
                startMem = endMem;
                var now = new Date();
                endMem = now.getFullYear() + "-" +
                    ("0" + (now.getMonth() + 1)).slice(-2) + "-" +
                    ("0" + now.getDate()).slice(-2) + "T" +
                    ("0" + now.getHours()).slice(-2) + "%3A" +
                    ("0" + now.getMinutes()).slice(-2) + "%3A" +
                    ("0" + now.getSeconds()).slice(-2) + "." +
                    ("0" + now.getMilliseconds()).slice(-3);

                Promise.all([getMemData(startMem, endMem)])
                    .then(function (values) {
                        var xaxis = values[0][1];
                        var yaxis = values[0][0];

                        var update = {
                            x: [xaxis],
                            y: [yaxis]
                        }

                        Plotly.extendTraces('mem', update, [0]);

                        //var time = new Date();
                        //var oldTime = time.setMinutes(time.getMinutes() - 10);
                        //var futureTime = time.setMinutes(time.getMinutes() + 9.5);

                        //var minuteView = {
                        //    xaxis: {
                        //        type: 'date',
                        //        range: [oldTime, futureTime]
                        //    }
                        //};

                        //Plotly.relayout('mem', minuteView);
                    });
            }, @IndexModel.userSession.sendRate*1.1));
    </script>

    <p>Average CPU Usage: @Model.avgCPU.ToString("0.00")</p>
    <p>Average Memory Usage: @((Model.avgMem / 1000000).ToString("0.00")) MB</p>

    <button class="btn btn-default" onClick="window.location.reload()">Refresh Data</button>

    <p>Table of CPU and Mem Usage</p>
    <table class="table table-hover table-bordered" id="cpuMemTable">
        <thead>
            <tr>
                <th>CPU (Percentage)</th>
                <th>Memory (MB)</th>
                <th>Timestamp</th>
            </tr>
        </thead>
        <tbody>
            @if (Model.cpu != null)
            {
                @for (int i = Math.Max(Model.cpu.Count - 1, Model.mem.Count - 1); i >= 0; i--)
                {
                    CPU_Usage c = null;
                    Mem_Usage m = null;
                    if (i <= Model.cpu.Count - 1)
                    {
                        c = Model.cpu[i];
                    }
                    if (i <= Model.mem.Count - 1)
                    {
                        m = Model.mem[i];                  
                    }
            <tr>
                @if (c != null)
                {
                    <td>@c.usage.ToString("0.0000")</td>
                }
                else
                {
                    <td></td>
                }

                @if (m != null)
                {
                    <td>@((m.usage / 1000000.0).ToString("0.0000"))</td>
                }
                else
                {
                    <td></td>
                }

                @if (c != null)
                {
                    <td>@c.timestamp.ToLongTimeString() @c.timestamp.ToShortDateString()</td>
                }
                @if (c == null && m != null)
                {
                    <td>@m.timestamp.ToLongTimeString() @m.timestamp.ToShortDateString()</td>
                }
            </tr>
                }
            }
        </tbody>
    </table>
</div>