@page
@model WebApplication.Pages.Metrics.CPU_MemoryModel
@using DataTransfer;
@{
    ViewData["Title"] = "CPU_Memory";
}

<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css">
    <script src="https://cdn.plot.ly/plotly-1.2.0.min.js"></script>
</head>

    <div class="main">

        <font size="50">CPU and Memory Usage</font>

        <div id="chart"></div>
        <script>

            function getData() {
                return @Model.cpu[Model.cpu.Count - 1].usage;
            }

            Plotly.plot('chart', [{
                y: [getData()],
                type:'line'
            }])

            var cnt = 0;
            setInterval(function () {
                Plotly.extendTraces('chart', { y: [[getData()]] }, [0]);
                cnt++;
                if (cnt > 100) {
                    Plotly.relayout('chart', {
                        xaxis: {
                            range: [cnt - 100, cnt]
                        }
                    });
                }
            }, 5);
        </script>

        <div id="cpu"></div>
        <script>

            var yy = [@Model.avgCPU, 2];

            var trace1 = {
                y: yy,
                type: 'scatter'
            };

            var data = [trace1];

            var layout = {
                yaxis: {
                    visible: true,
                    title: 'CPU Usage'
                }
            }

            var graphOptions = {
                layout: layout,
            };

            Plotly.plot('cpu', data, graphOptions);
        </script>

        <!--
            <script>
            const url = 'https://randomuser.me/api/?results=10';
            fetch(url)
                .then((response) => response.json())
                .then(function (myJson) {
                    Console.log(myJson);
                    Console.Write(myJson)
                });           
        </script>
            -->

        <script>
            const url = 'http://localhost:54022/api/v1/CPU/Daterange?start=2018-06-14T00%3A31%3A35.444&end=2018-07-17T00%3A31%3A36.401';
            var result = fetch(url)
                .then((response) => response.json())
                .then(function (myJson) {
                    document.write(myJson);
                });
            var test = result;
        </script>

        <!--
    <div id="tester"></div>
    <script>
        TESTER = document.getElementById('tester');
        Plotly.plot(TESTER, [{
            x: [1, 2, 3, 4, 5],
            y: [1, 2, 4, 8, 16]
        }], {
                margin: { t: 0 }
            });
    </script>

    <div id="cpu"></div>
    <script>
        TESTER = document.getElementById('cpu');
        var trace1 = {
            x: [1],
            y: [2],
            type: 'scatter'
        };
        var data = [trace1];
        Plotly.plot('cpu', data);
    </script>
    -->

        <p>Average CPU Usage: @Model.avgCPU</p>

        <p>Log of CPU Usage</p>
        <div class="CPU-table" max-width="600px">
            <table class="table table-hover table-bordered">
                <thead>
                    <tr>
                        <th>CPU</th>
                        <th>Timestamp</th>
                    </tr>
                </thead>
                <tbody>
                    @if (Model.cpu != null)
                    {
                        @for (int i = Model.cpu.Count - 1; i >= 0; i--)
                        {
                            CPU_Usage c = Model.cpu.ElementAt<CPU_Usage>(i);
                            <tr>
                                <td>@c.usage</td>
                                <td>@c.timestamp</td>
                            </tr>
                        }
                    }
                    else
                    {
                        <tr>Unable to retrieve data</tr>

                    }
                </tbody>
            </table>
        </div>

        <p>Log of Memory Usage</p>
        <table class="table table-hover table-bordered">
            <thead>
                <tr>
                    <th>Memory</th>
                    <th>Timestamp</th>
                </tr>
            </thead>
            <tbody>
                @if (Model.mem != null)
                {
                    @for (int i = Model.mem.Count - 1; i >= 0; i--)
                    {
                        Mem_Usage m = Model.mem.ElementAt<Mem_Usage>(i);
                        <tr>
                            <td>@m.usage</td>
                            <td>@m.timestamp</td>
                        </tr>

                    }
                }
                else
                {
                    <tr>Unable to retrieve data</tr>

                }
            </tbody>
        </table>

    </div>